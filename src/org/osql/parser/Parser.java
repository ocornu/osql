/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.osql.parser;

import java.io.File;
import java.io.FileInputStream;
import java.util.Vector;
import org.osql.*;

public class Parser implements ParserConstants {

// ==================================================
  final public void Where(Database db, ClassTable t, StringBuffer w, StringBuffer f, StringBuffer j) throws ParseException, OSQLException {
    Expression(db, t, w, f, j);
    jj_consume_token(0);
  }

  final public void Expression(Database db, ClassTable t, StringBuffer w, StringBuffer f, StringBuffer j) throws ParseException, OSQLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                 w.append("NOT ");
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    Condition(db, t, w, f, j);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                         w.append(" AND ");
        break;
      case OR:
        jj_consume_token(OR);
                                                     w.append(" OR ");
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                         w.append("NOT ");
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      Condition(db, t, w, f, j);
    }
  }

  final public void Condition(Database db, ClassTable t, StringBuffer w, StringBuffer f, StringBuffer j) throws ParseException, OSQLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
                                  w.append("(");
      Expression(db, t, w, f, j);
      jj_consume_token(RP);
                                  w.append(")");
      break;
    case TRUE:
    case FALSE:
    case NULL:
    case STRING:
    case SUPER:
    case FIELD:
    case INTEGER:
    case FLOAT:
    case PLUS:
    case MINUS:
      Value(db, t, w, f, j);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALLEROREQ:
      case BIGGEROREQ:
      case NOTEQUAL:
      case EQUAL:
      case SMALLER:
      case BIGGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
                                                                  w.append("=");
          break;
        case NOTEQUAL:
          jj_consume_token(NOTEQUAL);
                                                                  w.append("!=");
          break;
        case SMALLER:
          jj_consume_token(SMALLER);
                                                                  w.append("<");
          break;
        case SMALLEROREQ:
          jj_consume_token(SMALLEROREQ);
                                                          w.append("<=");
          break;
        case BIGGER:
          jj_consume_token(BIGGER);
                                                                  w.append(">");
          break;
        case BIGGEROREQ:
          jj_consume_token(BIGGEROREQ);
                                                          w.append(">=");
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Value(db, t, w, f, j);
        break;
      case BETWEEN:
        jj_consume_token(BETWEEN);
                                                          w.append(" BETWEEN ");
        Value(db, t, w, f, j);
        jj_consume_token(AND);
                                                          w.append(" AND ");
        Value(db, t, w, f, j);
        break;
      case NOT:
      case IN:
      case LIKE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
                                                          w.append(" NOT");
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          jj_consume_token(IN);
          jj_consume_token(LP);
                                                                  w.append(" IN (");
          Value(db, t, w, f, j);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[6] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
                                                                  w.append(", ");
            Value(db, t, w, f, j);
          }
          jj_consume_token(RP);
                                                                  w.append(")");
          break;
        case LIKE:
          jj_consume_token(LIKE);
                                                                  w.append(" LIKE ");
          Value(db, t, w, f, j);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Value(Database db, ClassTable t, StringBuffer w, StringBuffer f, StringBuffer j) throws ParseException, OSQLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                           w.append("+");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                        w.append("-");
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    Term(db, t, w, f, j);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                          w.append("+");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                          w.append("-");
        break;
      case MULT:
        jj_consume_token(MULT);
                                          w.append("*");
        break;
      case DIV:
        jj_consume_token(DIV);
                                          w.append("/");
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term(db, t, w, f, j);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void Term(Database db, ClassTable t, StringBuffer w, StringBuffer f, StringBuffer j) throws ParseException, OSQLException {
        Token token;
        String last;
        ClassTable sub;
        StringBuffer label;
        int deep = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      token = jj_consume_token(STRING);
                                  w.append("'"); w.append(token.image); w.append("'");
      break;
    case INTEGER:
      token = jj_consume_token(INTEGER);
                                  w.append(token.image);
      break;
    case FLOAT:
      token = jj_consume_token(FLOAT);
                                  w.append(token.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                          w.append("TRUE");
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                          w.append("FALSE");
      break;
    case NULL:
      jj_consume_token(NULL);
                                          w.append("NULL");
      break;
    case SUPER:
    case FIELD:
                  label=new StringBuffer("\"");
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
        jj_consume_token(SUPER);
                                          label.append("super.");
                                                  t = t.superClassTable;
      }
      token = jj_consume_token(FIELD);
                                  label.append(token.image);
                                                  last = token.image;
                                                  sub = t;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(DOT);
        token = jj_consume_token(FIELD);
                                          label.append('.'); label.append(token.image);
                                                                  t = sub;
                                                                  sub = t.getFieldTable(db, last);
                                                                  StringBuffer tmp = new StringBuffer();
                                                                  tmp.append(" JOIN \"");
                                                                  tmp.append(sub.table.name);
                                                                  tmp.append("\" ON \"");
                                                                  tmp.append(sub.table.name);
                                                                  tmp.append("\".\"");
                                                                  tmp.append(sub.table.primaryKey);
                                                                  tmp.append("\"=\"");
//								  if (deep>0) {
                                                                          tmp.append(t.table.name);
                                                                          tmp.append("\".\"");
//								  }
                                                                  tmp.append(last);
                                                                  tmp.append("\"");
                                                                  if (j.indexOf(tmp.toString())==-1)
                                                                                j.append(tmp);
                                                                  last = token.image;
                                                                  deep++;
      }
                  label.append("\"");
                  w.append(label);
                  if (deep>0) {
                          f.append(", \"");
                          f.append(sub.table.name);
                          f.append("\".\"");
                          f.append(last);
                          f.append("\" AS ");
                          f.append(label);
                  }
                  if (db.logLevel==db.LOG_DEBUG) {
                          System.out.print("Parser: "+label.toString()+" : [");
                          System.out.println(f.toString()+"|"+j.toString()+"]");
                  }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100,0x600,0x600,0x100,0x1f800,0x100,0x80000000,0xa0000,0xff900,0x28700040,0x0,0x0,0x0,0x0,0x20000000,0x40000000,0x28700000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1b1,0x180,0x180,0x780,0x780,0x0,0x0,0x31,};
   }

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[43];
    for (int i = 0; i < 43; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

/*  public static void main(String args[]) {// throws ParseException {
    try {
    	File file = new java.io.File("/home/zit/private/projects/OSQL/src/org/osql/parser/test");
    	FileInputStream in = new FileInputStream(file);
        Parser parser = new Parser(in);
        StringBuffer s = new StringBuffer();
        parser.Where(s);
        System.out.println(s);
//		RuleFactory factory = new RuleFactory(new org.clanspy.games.et.Game());
//		System.out.println(parser.recordInto(factory)+" rules loaded.");
    } catch (Exception e) {
        e.printStackTrace();
    }
  }*/
}
